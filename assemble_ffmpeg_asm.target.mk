# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := assemble_ffmpeg_asm
### Generated for rule assemble_ffmpeg_asm_assemble:
$(obj)/gen/third_party/ffmpeg/deinterlace.o: obj := $(abs_obj)

$(obj)/gen/third_party/ffmpeg/deinterlace.o: builddir := $(abs_builddir)

$(obj)/gen/third_party/ffmpeg/deinterlace.o: TOOLSET := $(TOOLSET)
$(obj)/gen/third_party/ffmpeg/deinterlace.o: third_party/ffmpeg/patched-ffmpeg-mt/libavcodec/x86/deinterlace.asm $(builddir)/yasm FORCE_DO_CMD
	$(call do_cmd,assemble_ffmpeg_asm_assemble_0)

all_deps += $(obj)/gen/third_party/ffmpeg/deinterlace.o
cmd_assemble_ffmpeg_asm_assemble_0 = export LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; cd third_party/ffmpeg; mkdir -p $(obj)/gen/third_party/ffmpeg; "$(builddir)/yasm" -f elf -DARCH_X86_32 -m x86 -I patched-ffmpeg-mt/libavcodec/x86/ -o "$(obj)/gen/third_party/ffmpeg/deinterlace.o" "$(abspath $<)"
quiet_cmd_assemble_ffmpeg_asm_assemble_0 = RULE assemble_ffmpeg_asm_assemble_0 $@

$(obj)/gen/third_party/ffmpeg/dsputil_yasm.o: obj := $(abs_obj)

$(obj)/gen/third_party/ffmpeg/dsputil_yasm.o: builddir := $(abs_builddir)

$(obj)/gen/third_party/ffmpeg/dsputil_yasm.o: TOOLSET := $(TOOLSET)
$(obj)/gen/third_party/ffmpeg/dsputil_yasm.o: third_party/ffmpeg/patched-ffmpeg-mt/libavcodec/x86/dsputil_yasm.asm $(builddir)/yasm FORCE_DO_CMD
	$(call do_cmd,assemble_ffmpeg_asm_assemble_1)

all_deps += $(obj)/gen/third_party/ffmpeg/dsputil_yasm.o
cmd_assemble_ffmpeg_asm_assemble_1 = export LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; cd third_party/ffmpeg; mkdir -p $(obj)/gen/third_party/ffmpeg; "$(builddir)/yasm" -f elf -DARCH_X86_32 -m x86 -I patched-ffmpeg-mt/libavcodec/x86/ -o "$(obj)/gen/third_party/ffmpeg/dsputil_yasm.o" "$(abspath $<)"
quiet_cmd_assemble_ffmpeg_asm_assemble_1 = RULE assemble_ffmpeg_asm_assemble_1 $@

$(obj)/gen/third_party/ffmpeg/fft_mmx.o: obj := $(abs_obj)

$(obj)/gen/third_party/ffmpeg/fft_mmx.o: builddir := $(abs_builddir)

$(obj)/gen/third_party/ffmpeg/fft_mmx.o: TOOLSET := $(TOOLSET)
$(obj)/gen/third_party/ffmpeg/fft_mmx.o: third_party/ffmpeg/patched-ffmpeg-mt/libavcodec/x86/fft_mmx.asm $(builddir)/yasm FORCE_DO_CMD
	$(call do_cmd,assemble_ffmpeg_asm_assemble_2)

all_deps += $(obj)/gen/third_party/ffmpeg/fft_mmx.o
cmd_assemble_ffmpeg_asm_assemble_2 = export LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; cd third_party/ffmpeg; mkdir -p $(obj)/gen/third_party/ffmpeg; "$(builddir)/yasm" -f elf -DARCH_X86_32 -m x86 -I patched-ffmpeg-mt/libavcodec/x86/ -o "$(obj)/gen/third_party/ffmpeg/fft_mmx.o" "$(abspath $<)"
quiet_cmd_assemble_ffmpeg_asm_assemble_2 = RULE assemble_ffmpeg_asm_assemble_2 $@

$(obj)/gen/third_party/ffmpeg/h264_chromamc.o: obj := $(abs_obj)

$(obj)/gen/third_party/ffmpeg/h264_chromamc.o: builddir := $(abs_builddir)

$(obj)/gen/third_party/ffmpeg/h264_chromamc.o: TOOLSET := $(TOOLSET)
$(obj)/gen/third_party/ffmpeg/h264_chromamc.o: third_party/ffmpeg/patched-ffmpeg-mt/libavcodec/x86/h264_chromamc.asm $(builddir)/yasm FORCE_DO_CMD
	$(call do_cmd,assemble_ffmpeg_asm_assemble_3)

all_deps += $(obj)/gen/third_party/ffmpeg/h264_chromamc.o
cmd_assemble_ffmpeg_asm_assemble_3 = export LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; cd third_party/ffmpeg; mkdir -p $(obj)/gen/third_party/ffmpeg; "$(builddir)/yasm" -f elf -DARCH_X86_32 -m x86 -I patched-ffmpeg-mt/libavcodec/x86/ -o "$(obj)/gen/third_party/ffmpeg/h264_chromamc.o" "$(abspath $<)"
quiet_cmd_assemble_ffmpeg_asm_assemble_3 = RULE assemble_ffmpeg_asm_assemble_3 $@

$(obj)/gen/third_party/ffmpeg/vp3dsp.o: obj := $(abs_obj)

$(obj)/gen/third_party/ffmpeg/vp3dsp.o: builddir := $(abs_builddir)

$(obj)/gen/third_party/ffmpeg/vp3dsp.o: TOOLSET := $(TOOLSET)
$(obj)/gen/third_party/ffmpeg/vp3dsp.o: third_party/ffmpeg/patched-ffmpeg-mt/libavcodec/x86/vp3dsp.asm $(builddir)/yasm FORCE_DO_CMD
	$(call do_cmd,assemble_ffmpeg_asm_assemble_4)

all_deps += $(obj)/gen/third_party/ffmpeg/vp3dsp.o
cmd_assemble_ffmpeg_asm_assemble_4 = export LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; cd third_party/ffmpeg; mkdir -p $(obj)/gen/third_party/ffmpeg; "$(builddir)/yasm" -f elf -DARCH_X86_32 -m x86 -I patched-ffmpeg-mt/libavcodec/x86/ -o "$(obj)/gen/third_party/ffmpeg/vp3dsp.o" "$(abspath $<)"
quiet_cmd_assemble_ffmpeg_asm_assemble_4 = RULE assemble_ffmpeg_asm_assemble_4 $@

rule_assemble_ffmpeg_asm_assemble_outputs := $(obj)/gen/third_party/ffmpeg/deinterlace.o \
	$(obj)/gen/third_party/ffmpeg/dsputil_yasm.o \
	$(obj)/gen/third_party/ffmpeg/fft_mmx.o \
	$(obj)/gen/third_party/ffmpeg/h264_chromamc.o \
	$(obj)/gen/third_party/ffmpeg/vp3dsp.o

### Finished generating for rule: assemble_ffmpeg_asm_assemble

### Finished generating for all rules

DEFS_Debug := '-DNO_HEAPCHECKER' \
	'-DCHROMIUM_BUILD' \
	'-DOS_MEEGO=1' \
	'-DTOOLKIT_MEEGOTOUCH=1' \
	'-DENABLE_REMOTING=1' \
	'-DENABLE_GPU=1' \
	'-DDYNAMIC_ANNOTATIONS_ENABLED=1' \
	'-D_DEBUG'

# Flags passed to both C and C++ files.
CFLAGS_Debug :=  \
	-pthread \
	-fno-exceptions \
	-Wno-unused-parameter \
	-Wno-missing-field-initializers \
	-D_FILE_OFFSET_BITS=64 \
	-pipe \
	-m32 \
	-mmmx \
	-march=pentium4 \
	-msse2 \
	-mfpmath=sse \
	-fno-strict-aliasing \
	-O2 \
	-g

# Flags passed to only C (and not C++) files.
CFLAGS_C_Debug := 

# Flags passed to only C++ (and not C) files.
CFLAGS_CC_Debug := -fno-threadsafe-statics \
	-fvisibility-inlines-hidden

INCS_Debug := 

DEFS_Release := '-DNO_HEAPCHECKER' \
	'-DCHROMIUM_BUILD' \
	'-DOS_MEEGO=1' \
	'-DTOOLKIT_MEEGOTOUCH=1' \
	'-DENABLE_REMOTING=1' \
	'-DENABLE_GPU=1' \
	'-DNDEBUG' \
	'-DNVALGRIND' \
	'-DDYNAMIC_ANNOTATIONS_ENABLED=0'

# Flags passed to both C and C++ files.
CFLAGS_Release :=  \
	-pthread \
	-fno-exceptions \
	-Wno-unused-parameter \
	-Wno-missing-field-initializers \
	-D_FILE_OFFSET_BITS=64 \
	-pipe \
	-m32 \
	-mmmx \
	-march=pentium4 \
	-msse2 \
	-mfpmath=sse \
	-fno-strict-aliasing \
	-O2 \
	-fno-ident \
	-fdata-sections \
	-ffunction-sections

# Flags passed to only C (and not C++) files.
CFLAGS_C_Release := 

# Flags passed to only C++ (and not C) files.
CFLAGS_CC_Release := -fno-threadsafe-statics \
	-fvisibility-inlines-hidden

INCS_Release := 

OBJS := 

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | yasm

# Make sure our actions/rules run before any of us.
$(OBJS): | $(rule_assemble_ffmpeg_asm_assemble_outputs)


### Rules for final target.
# Build our special outputs first.
$(obj).target/third_party/ffmpeg/assemble_ffmpeg_asm.stamp: | $(rule_assemble_ffmpeg_asm_assemble_outputs)

# Preserve order dependency of special output on deps.
$(rule_assemble_ffmpeg_asm_assemble_outputs): | yasm

$(obj).target/third_party/ffmpeg/assemble_ffmpeg_asm.stamp: TOOLSET := $(TOOLSET)
$(obj).target/third_party/ffmpeg/assemble_ffmpeg_asm.stamp: yasm FORCE_DO_CMD
	$(call do_cmd,touch)

all_deps += $(obj).target/third_party/ffmpeg/assemble_ffmpeg_asm.stamp
# Add target alias
.PHONY: assemble_ffmpeg_asm
assemble_ffmpeg_asm: $(obj).target/third_party/ffmpeg/assemble_ffmpeg_asm.stamp

# Add target alias to "all" target.
.PHONY: all
all: assemble_ffmpeg_asm

